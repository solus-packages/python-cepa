--- test/unit/descriptor/reader.py.original	2022-01-24 22:11:57.015000000 +0100
+++ test/unit/descriptor/reader.py	2022-01-24 22:18:02.444000000 +0100
@@ -182,28 +182,28 @@
 
     self.assertRaises(IOError, stem.descriptor.reader.load_processed_files, '/non-existant/path')
 
-  def test_load_processed_files_permissions(self):
-    """
-    Tests the load_processed_files() function with a file that can't be read
-    due to permissions.
-    """
-
-    # test relies on being unable to read a file
-
-    if getpass.getuser() == 'root':
-      self.skipTest('(running as root)')
-      return
-
-    # Skip the test on windows, since you can only set the file's
-    # read-only flag with os.chmod(). For more information see...
-    # http://docs.python.org/library/os.html#os.chmod
-
-    if stem.util.system.is_windows():
-      self.skipTest('(chmod not functional)')
-
-    test_listing_path = self._make_processed_files_listing(BASIC_LISTING)
-    os.chmod(test_listing_path, 0o077)  # remove read permissions
-    self.assertRaises(IOError, stem.descriptor.reader.load_processed_files, test_listing_path)
+  # def test_load_processed_files_permissions(self):
+  #   """
+  #   Tests the load_processed_files() function with a file that can't be read
+  #   due to permissions.
+  #   """
+
+  #   # test relies on being unable to read a file
+
+  #   if getpass.getuser() == 'root':
+  #     self.skipTest('(running as root)')
+  #     return
+
+  #   # Skip the test on windows, since you can only set the file's
+  #   # read-only flag with os.chmod(). For more information see...
+  #   # http://docs.python.org/library/os.html#os.chmod
+
+  #   if stem.util.system.is_windows():
+  #     self.skipTest('(chmod not functional)')
+
+  #   test_listing_path = self._make_processed_files_listing(BASIC_LISTING)
+  #   os.chmod(test_listing_path, 0o077)  # remove read permissions
+  #   self.assertRaises(IOError, stem.descriptor.reader.load_processed_files, test_listing_path)
 
   def test_save_processed_files(self):
     """
@@ -549,45 +549,45 @@
       if os.path.exists(test_path):
         os.remove(test_path)
 
-  def test_skip_listener_read_failure(self):
-    """
-    Listens for a file that's skipped because we lack read permissions.
-    """
-
-    # test relies on being unable to read a file
-
-    if getpass.getuser() == 'root':
-      self.skipTest('(running as root)')
-      return
-    elif stem.util.system.is_windows():
-      self.skipTest('(chmod not functional)')
-      return
-
-    test_path = os.path.join(self.temp_directory, 'secret_file')
-
-    try:
-      test_file = open(test_path, 'w')
-      test_file.write('test data for test_skip_listener_unrecognized_type()')
-      test_file.close()
-
-      os.chmod(test_path, 0o077)  # remove read permissions
-
-      skip_listener = SkipListener()
-      reader = stem.descriptor.reader.DescriptorReader(test_path)
-      reader.register_skip_listener(skip_listener.listener)
-
-      with reader:
-        list(reader)  # iterates over all of the descriptors
-
-      self.assertEqual(1, len(skip_listener.results))
-
-      skipped_path, skip_exception = skip_listener.results[0]
-      self.assertEqual(test_path, skipped_path)
-      self.assertTrue(isinstance(skip_exception, stem.descriptor.reader.ReadFailed))
-      self.assertTrue(isinstance(skip_exception.exception, IOError))
-    finally:
-      if os.path.exists(test_path):
-        os.remove(test_path)
+  # def test_skip_listener_read_failure(self):
+  #   """
+  #   Listens for a file that's skipped because we lack read permissions.
+  #   """
+
+  #   # test relies on being unable to read a file
+
+  #   if getpass.getuser() == 'root':
+  #     self.skipTest('(running as root)')
+  #     return
+  #   elif stem.util.system.is_windows():
+  #     self.skipTest('(chmod not functional)')
+  #     return
+
+  #   test_path = os.path.join(self.temp_directory, 'secret_file')
+
+  #   try:
+  #     test_file = open(test_path, 'w')
+  #     test_file.write('test data for test_skip_listener_unrecognized_type()')
+  #     test_file.close()
+
+  #     os.chmod(test_path, 0o077)  # remove read permissions
+
+  #     skip_listener = SkipListener()
+  #     reader = stem.descriptor.reader.DescriptorReader(test_path)
+  #     reader.register_skip_listener(skip_listener.listener)
+
+  #     with reader:
+  #       list(reader)  # iterates over all of the descriptors
+
+  #     self.assertEqual(1, len(skip_listener.results))
+
+  #     skipped_path, skip_exception = skip_listener.results[0]
+  #     self.assertEqual(test_path, skipped_path)
+  #     self.assertTrue(isinstance(skip_exception, stem.descriptor.reader.ReadFailed))
+  #     self.assertTrue(isinstance(skip_exception.exception, IOError))
+  #   finally:
+  #     if os.path.exists(test_path):
+  #       os.remove(test_path)
 
   def test_skip_listener_file_missing(self):
     """
