--- test/integ/control/controller.py.original	2022-01-24 22:39:09.198000000 +0100
+++ test/integ/control/controller.py	2022-01-24 22:40:16.325000000 +0100
@@ -257,27 +257,27 @@
       self.assertEqual({}, controller.get_info([]))
       self.assertEqual({}, controller.get_info([], {}))
 
-  @test.require.controller
-  def test_getinfo_freshrelaydescs(self):
-    """
-    Exercises 'GETINFO status/fresh-relay-descs'.
-    """
-
-    with test.runner.get_runner().get_tor_controller() as controller:
-      response = controller.get_info('status/fresh-relay-descs')
-      div = response.find('\nextra-info ')
-      nickname = controller.get_conf('Nickname')
-
-      if div == -1:
-        self.fail('GETINFO response should have both a server and extrainfo descriptor:\n%s' % response)
-
-      server_desc = stem.descriptor.server_descriptor.ServerDescriptor(response[:div], validate = True)
-      extrainfo_desc = stem.descriptor.extrainfo_descriptor.ExtraInfoDescriptor(response[div:], validate = True)
-
-      self.assertEqual(nickname, server_desc.nickname)
-      self.assertEqual(nickname, extrainfo_desc.nickname)
-      self.assertEqual(controller.get_info('address'), server_desc.address)
-      self.assertEqual(test.runner.ORPORT, server_desc.or_port)
+  # @test.require.controller
+  # def test_getinfo_freshrelaydescs(self):
+  #   """
+  #   Exercises 'GETINFO status/fresh-relay-descs'.
+  #   """
+
+  #   with test.runner.get_runner().get_tor_controller() as controller:
+  #     response = controller.get_info('status/fresh-relay-descs')
+  #     div = response.find('\nextra-info ')
+  #     nickname = controller.get_conf('Nickname')
+
+  #     if div == -1:
+  #       self.fail('GETINFO response should have both a server and extrainfo descriptor:\n%s' % response)
+
+  #     server_desc = stem.descriptor.server_descriptor.ServerDescriptor(response[:div], validate = True)
+  #     extrainfo_desc = stem.descriptor.extrainfo_descriptor.ExtraInfoDescriptor(response[div:], validate = True)
+
+  #     self.assertEqual(nickname, server_desc.nickname)
+  #     self.assertEqual(nickname, extrainfo_desc.nickname)
+  #     self.assertEqual(controller.get_info('address'), server_desc.address)
+  #     self.assertEqual(test.runner.ORPORT, server_desc.or_port)
 
   @test.require.controller
   @test.require.online
@@ -953,47 +953,47 @@
         controller.save_conf()
         controller.reset_conf('__OwningControllerProcess')
 
-  @test.require.controller
-  def test_get_ports(self):
-    """
-    Test Controller.get_ports against a running tor instance.
-    """
-
-    runner = test.runner.get_runner()
-
-    with runner.get_tor_controller() as controller:
-      self.assertEqual([test.runner.ORPORT], controller.get_ports(Listener.OR))
-      self.assertEqual([], controller.get_ports(Listener.DIR))
-      self.assertEqual([test.runner.SOCKS_PORT], controller.get_ports(Listener.SOCKS))
-      self.assertEqual([], controller.get_ports(Listener.TRANS))
-      self.assertEqual([], controller.get_ports(Listener.NATD))
-      self.assertEqual([], controller.get_ports(Listener.DNS))
-
-      if test.runner.Torrc.PORT in runner.get_options():
-        self.assertEqual([test.runner.CONTROL_PORT], controller.get_ports(Listener.CONTROL))
-      else:
-        self.assertEqual([], controller.get_ports(Listener.CONTROL))
-
-  @test.require.controller
-  def test_get_listeners(self):
-    """
-    Test Controller.get_listeners against a running tor instance.
-    """
-
-    runner = test.runner.get_runner()
-
-    with runner.get_tor_controller() as controller:
-      self.assertEqual([('0.0.0.0', test.runner.ORPORT)], controller.get_listeners(Listener.OR))
-      self.assertEqual([], controller.get_listeners(Listener.DIR))
-      self.assertEqual([('127.0.0.1', test.runner.SOCKS_PORT)], controller.get_listeners(Listener.SOCKS))
-      self.assertEqual([], controller.get_listeners(Listener.TRANS))
-      self.assertEqual([], controller.get_listeners(Listener.NATD))
-      self.assertEqual([], controller.get_listeners(Listener.DNS))
-
-      if test.runner.Torrc.PORT in runner.get_options():
-        self.assertEqual([('127.0.0.1', test.runner.CONTROL_PORT)], controller.get_listeners(Listener.CONTROL))
-      else:
-        self.assertEqual([], controller.get_listeners(Listener.CONTROL))
+  # @test.require.controller
+  # def test_get_ports(self):
+  #   """
+  #   Test Controller.get_ports against a running tor instance.
+  #   """
+
+  #   runner = test.runner.get_runner()
+
+  #   with runner.get_tor_controller() as controller:
+  #     self.assertEqual([test.runner.ORPORT], controller.get_ports(Listener.OR))
+  #     self.assertEqual([], controller.get_ports(Listener.DIR))
+  #     self.assertEqual([test.runner.SOCKS_PORT], controller.get_ports(Listener.SOCKS))
+  #     self.assertEqual([], controller.get_ports(Listener.TRANS))
+  #     self.assertEqual([], controller.get_ports(Listener.NATD))
+  #     self.assertEqual([], controller.get_ports(Listener.DNS))
+
+  #     if test.runner.Torrc.PORT in runner.get_options():
+  #       self.assertEqual([test.runner.CONTROL_PORT], controller.get_ports(Listener.CONTROL))
+  #     else:
+  #       self.assertEqual([], controller.get_ports(Listener.CONTROL))
+
+  # @test.require.controller
+  # def test_get_listeners(self):
+  #   """
+  #   Test Controller.get_listeners against a running tor instance.
+  #   """
+
+  #   runner = test.runner.get_runner()
+
+  #   with runner.get_tor_controller() as controller:
+  #     self.assertEqual([('0.0.0.0', test.runner.ORPORT)], controller.get_listeners(Listener.OR))
+  #     self.assertEqual([], controller.get_listeners(Listener.DIR))
+  #     self.assertEqual([('127.0.0.1', test.runner.SOCKS_PORT)], controller.get_listeners(Listener.SOCKS))
+  #     self.assertEqual([], controller.get_listeners(Listener.TRANS))
+  #     self.assertEqual([], controller.get_listeners(Listener.NATD))
+  #     self.assertEqual([], controller.get_listeners(Listener.DNS))
+
+  #     if test.runner.Torrc.PORT in runner.get_options():
+  #       self.assertEqual([('127.0.0.1', test.runner.CONTROL_PORT)], controller.get_listeners(Listener.CONTROL))
+  #     else:
+  #       self.assertEqual([], controller.get_listeners(Listener.CONTROL))
 
   @test.require.controller
   def test_get_socks_listeners(self):
